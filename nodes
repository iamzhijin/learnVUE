vue:
安装：
	npm install -g vue-cli
	vue init webpack projectName  初始化项目
	cd projectName
	npm install  安装依赖
	npm run dev

目录结构：
	index.html  项目根视图	
	
基本指令：
	v-html: 渲染文本, 能解析 <p>ccccc</P>
	v-text: 不能能解析 <p>ccccc</P>
	b-bind: 绑定属性
	
条件渲染：
	v-if="xxx"
	v-else-if=""
	v-show=""  # 基于css 进行变换
	
列表渲染：
	<li v-for="(item, index) in lists" v-bind:key="index">{{ item}}</li>

事件处理：
	v-on:
	与data同级增加methods: {
		函数名: function(参数){

		}
	}
	事件修饰符
	按键修饰符：
		v-on:keyup.enter="函数名"

计算属性与监听：
    计算属性:
        增加computed: {
            属性名: function(){
                return xxx
            }
        }
    computed vs methods:
        计算属性依赖于缓存 只要数据不变 只计算一次， methods会每次都计算
	侦听器：
		watch: {
			属性名: function(){
				当需要在数据变化时执行异步或开销较大的操作时，这个方式是最有用的。
			}
		}

表单绑定：
    v-model: 双向数据绑定
        <input type="text" v-model="msg">  
        通过 watch: {} 监听数据改变 
        修饰符：
			.lazy 光标移开时触发绑定事件
			.munber
			.trim  过滤用户输入的首尾空白字符
            <input type="text" v-model.lazy="msg">  

style 与 class:
	<div v-bind:class="{active: isActive}">

组件：
	创建子组件：
		1.新建组件
		2.父组件中引入：import Children from './children'
		3.父组件中注入：components: {Children}
		4.父组件中渲染：<Children />
	父组件传递到子组件：
		父组件中传：<Children :属性名="要传递的数据/属性" />
		子组件中收：props:{}
	props验证：
		类型验证
		必选项验证
		默认值
	子组件传递到父组件：
		1.子组件中：触发事件
		2.事件中：this.$emit("send", this.addNum)
		3.父组件中自定义事件

	插槽：
		单个插槽
			1.创建父子组件
			2.父：<Children><p>我是插槽</p></Children>  子：<slot></slot>
		具名插槽
		作用域插槽： 数据为子 --> 父				
                            