vue:
安装：
	npm install -g vue-cli
	vue init webpack projectName  初始化项目
	cd projectName
	npm install  安装依赖
	npm run dev

目录结构：
	index.html  项目根视图	
	
基本指令：
	v-html: 渲染文本, 能解析 <p>ccccc</P>
	v-text: 不能能解析 <p>ccccc</P>
	b-bind: 绑定属性
	
条件渲染：
	v-if="xxx"
	v-else-if=""
	v-show=""  # 基于css 进行变换
	
列表渲染：
	<li v-for="(item, index) in lists" v-bind:key="index">{{ item}}</li>

事件处理：
	v-on:
	与data同级增加methods: {
		函数名: function(参数){

		}
	}
	事件修饰符
	按键修饰符：
		v-on:keyup.enter="函数名"

计算属性与监听：
    计算属性:
        增加computed: {
            属性名: function(){
                return xxx
            }
        }
    computed vs methods:
        计算属性依赖于缓存 只要数据不变 只计算一次， methods会每次都计算
	侦听器：
		watch: {
			属性名: function(){
				当需要在数据变化时执行异步或开销较大的操作时，这个方式是最有用的。
			}
		}

表单绑定：
    v-model: 双向数据绑定
        <input type="text" v-model="msg">  
        通过 watch: {} 监听数据改变 
        修饰符：
			.lazy 光标移开时触发绑定事件
			.munber
			.trim  过滤用户输入的首尾空白字符
            <input type="text" v-model.lazy="msg">  

style 与 class:
	<div v-bind:class="{active: isActive}">

组件：
	创建子组件：
		1.新建组件
		2.父组件中引入：import Children from './children'
		3.父组件中注入：components: {Children}
		4.父组件中渲染：<Children />
	父组件传递到子组件：
		父组件中传：<Children :属性名="要传递的数据/属性" />
		子组件中收：props:{}
	props验证：
		类型验证
		必选项验证
		默认值
	子组件传递到父组件：
		1.子组件中：触发事件
		2.事件中：this.$emit("send", this.addNum)
		3.父组件中自定义事件

	插槽：
		单个插槽
			1.创建父子组件
			2.父：<Children><p>我是插槽</p></Children>  子：<slot></slot>
		具名插槽
			1.父：<p slot="s1">test</p>
			2.子： <slot name="s1"></slot>
		作用域插槽： 数据为子 --> 父
			1.场景：数据相同 展示形式不一样
			2.子组件中定义数据： <slot name="d2" :text="context"></slot>
			3.父组件中接收数据：<div slot="d2" slot-scope="props">{{ props.text }}</div>

	动态组件：
		component：(重新渲染视图)
			父组件中：<component :is="currentView"></component>, currentView对应视图名
		keep-alive: (从缓存中读取视图)
			<keep-alive><component :is="currentView"></component></keep-alive>

过度与动画：
	pass

自定义指令：
	全局指令：
		main.js中定义: Vue.directive('指令名', {钩子函数}})
	局部指令：
		directives: {'指令名': {钩子函数}}	

过滤器：
	{{ 内容 | 过滤规则名 }}
	filters: { 过滤规则名: function(value){具体规则} }

axios:
	中文文档：https://www.kancloud.cn/yunye/axios/234845
	vue 中引入(main.js)：
		import Axios from 'axios' // 引入axios
		Vue.prototype.$axios = Axios // axios挂载在Vue 对象
	vue中axios跨域请求问题：
		Vue.prototype.HOME = '/api'  // HOME 是一个定值 默认指向localhost 修为为 /api 并在index.js 中配置允许跨域
		proxyTable: { // axios 跨域请求 处理
		'/api': {
			// target: 'https://api.douban.com',
			target: 'http://10.1.1.114:7887',
			changeOrigin: true, //允许跨域
			pathRewrite: {
			'^/api': '' // 理解为用 /api 代替target中的地址
			}
		}
		},
		*此方法仅使用于测试阶段
	axios做post请求：
		参数形式：
			form-data: ?key=value&key=value
			x-www-form-urlencode: {key: 'value', key: 'value'}
			axios post请求只接受form-data形式
				转换：qs.stringify({key: value})
	axios全局设置：
		axios.defaults.baseURL = '根路径配置'; // 配置了跨域问题时 不需要再配置此选项
		axios.defaults.headers.common['Authorization'] = AUTH_TOKEN;
		axios.defaults.headers.post['Content-Type'] = 'application/x-www-form-urlencoded';

	axios拦截器：
		请求拦截：
			axios.interceptors.request.use(function (config) {
    			// 在发送请求之前做些什么
    			return config;
  			}, function (error) {
    			// 对请求错误做些什么
    			return Promise.reject(error);
  			});
		响应拦截：
			axios.interceptors.response.use(function (response) {
    			// 对响应数据做点什么
   	 			return response;
  			}, function (error) {
    			// 对响应错误做点什么
    			return Promise.reject(error);
  			});	  	

路由：
	跳转：
		<router-link to="">xxx</rount-link>  to 可以有多种写法 :to=""





                            